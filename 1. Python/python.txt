Python: 
```````
 - Popular Programming Language - Guido van Rossum in 1991 at CWI in the Netherlands

1. Reserved words or Keywords:
2. Variable:
3. Data Types:
4. Operations:
5. Operators:
6. Flow Control:

[Qucik Search: Select -> Contol + f -> Enter]

1. Reserved words or Keywords:
```````````````````````````````
	- Keywords have special meanings to the compiler. There are 35 keywords.
	
	False		await		else		import		pass
	None		break	   	except		in			raise
	True		class	   	finally		is			return
	and 		continue   	for			lambda		try
	as 			def 	   	from		nonlocal	while
	assert		del   	   	global		not			with
	async		elif	   	if			or			yield

	Value Keywords			- 	True, False, None
	Operator Keywords		- 	and, or, not, in, is
	Control Flow Keywords	- 	if, elif, else
	Iteration Keywords		- 	for, while, break, continue
	Structure Keywords		- 	def, class, with, pass, lambda
	Returning Keywords		-	return, yield
	Import Keywords			- 	import, from, as
	Exception-Handling Keywords -	try, except, raise, finally, assert
	Asynchronous Keywords	    - 	async, await
	Variable Handling Keywords  - 	del, global, nonlocal

	True, False - Boolean value
	Eg:
		x = True			y = False
		x is True			y is not True
		# True			# True
		
	None - Represents no Value
	Eg:
		def func():				- can't print the call 
			print("hello")			- can't print the print
		x = func()
		# hello
		print(x)			
		# None
    
2. Variable:
````````````
	Cotainers for storing data values. 
	Literals - Raw data assigned to a Variable or Constant
	Python is a dynamically-typed language, and there is no built-in mechanism to enforce constant values.
		
		- Python is case sensitive. Eg: y and Y are Different

	name  = "Shiffana" 
	|	      |
	Variable   Literal

3. Data Types:
``````````````
	- In Python, there are several built-in data types that you can use to store different kinds of data. 
		Here is a comprehensive list of all the data types in Python:

	|   Category         |   Type       |   Description                                     |   Example                           |
	| ------------------ | ------------ | ------------------------------------------------- | ----------------------------------- |
	| 1 Numeric Types    |  int         | Whole numbers, positive or negative               |  x = 10                             |
	|                    |  float       | Numbers with decimal points                       |  pi = 3.14                          |
	|                    |  complex     | Numbers with real and imaginary parts             |  z = 2 + 3j                         |
	| 2 Text Type        |  str         | Sequence of characters (Unicode)                  |  name = "Alice"                     |
	| 3 Boolean Type     |  bool        | Logical values: True or False                     |  is_active = True                   |
	| 4 Sequence Types   |  list        | Mutable ordered sequence                          |  fruits = ["apple", "banana"]       |
	|                    |  tuple       | Immutable ordered sequence                        |  point = (10, 20)                   |
	|                    |  range       | Immutable range of numbers                        |  numbers = range(5)                 |
	| 5 Mapping Type     |  dict        | Key-value pair collection                         |  user = {"name": "Bob", "age": 30}  |
	| 6 Set Types        |  set         | Unordered collection of unique elements (mutable) |  s = {1, 2, 3}                      |
	|                    |  frozenset   | Unordered unique collection (immutable)           |  fs = frozenset([1, 2, 3])          |
	| 7 Binary Types     |  bytes       | Immutable byte sequence                           |  b = b"hello"                       |
	|                    |  bytearray   | Mutable byte sequence                             |  ba = bytearray(b"data")            |
	|                    |  memoryview  | View over byte data                               |  mv = memoryview(b"abc")            |
	| 8 None Type        |  NoneType    | Represents absence of value                       |  result = None                      |


	Data Type:			Type Casting:	- Changing the type of data
	``````````			`````````````
	print(type(x))		x = int("3")		

4. Operations: 
``````````````
	Operator is the tool, operation is the action.
	- The action performed using an operator or method.
		Example: addition, comparison, appending, slicing

	1. String Operations 

		|   Operation      |   Description                                  |   Example                          |
		| ---------------- | ---------------------------------------------- | ---------------------------------- |
		|  ' '  /  " "     | Define a string                                |  'Hello' ,  "World"                |
		|  len()           | Length of the string                           |  len("Python") → 6                 |
		|  in ,  not in    | Check if a substring exists                    |  "a" in "cat" → True               |
		| Indexing         | Access character by position                   |  "Hello"[1] → 'e'                  |
		| Slicing          | Access part of the string                      |  "Hello"[1:4] → 'ell'              |
		|  upper()         | Convert to uppercase                           |  "hi".upper() → "HI"               |
		|  lower()         | Convert to lowercase                           |  "HI".lower() → "hi"               |
		|  capitalize()    | Capitalize first character                     |  "python".capitalize() → "Python"  |
		|  strip()         | Remove whitespace from both ends               |  "  hi  ".strip() → "hi"           |
		|  replace()       | Replace parts of a string                      |  "hi".replace("h", "H") → "Hi"     |
		|  split()         | Split into list by delimiter                   |  "a,b".split(",") → ['a', 'b']     |
		|  format()        | Format strings with placeholders  {}           |  "Hello {}".format("World")        |
		|  find()          | Find first occurrence of substring             |  "apple".find("p") → 1             |
		|  rfind()         | Find last occurrence of substring              |  "banana".rfind("a") → 5           |
		|  index()         | Like  find()  but raises error if not found    |  "abc".index("b") → 1              |
		|  startswith()    | Check if string starts with value              |  "apple".startswith("a") → True    |
		|  endswith()      | Check if string ends with value                |  "apple".endswith("e") → True      |
		|  isalpha()       | Check if all characters are letters            |  "abc".isalpha() → True            |
		|  isdigit()       | Check if all characters are digits             |  "123".isdigit() → True            |
		|  isalnum()       | Check if all characters are alphanumeric       |  "abc123".isalnum() → True         |
		|  isupper()       | Check if all characters are uppercase          |  "HELLO".isupper() → True          |
		|  islower()       | Check if all characters are lowercase          |  "hello".islower() → True          |
		|  join()          | Join iterable into string                      |  ",".join(["a", "b"]) → "a,b"      |
		|  zfill()         | Pad string on the left with zeros              |  "7".zfill(3) → "007"              |
		| Escape Sequences | Special characters: newline, tab, quotes, etc. |  \n ,  \t ,  \' ,  \\ ,  \"        |

	2. List Operations

		|   Operation          |   Description                                     |   Example                             |
		| -------------------- | ------------------------------------------------- | ------------------------------------- |
		|  len()               | Get number of items in the list                   |  len([1, 2, 3]) → 3                   |
		|  in ,  not in        | Check if item exists in the list                  |  "apple" in fruits → True             |
		| Indexing             | Access item by index                              |  fruits[0] → "apple"                  |
		| Slicing              | Get sublist by range                              |  fruits[1:3] → ['banana', 'mango']    |
		|  count()             | Count occurrences of an item                      |  fruits.count("apple") → 2            |
		|  index()             | Find index of the first matching item             |  fruits.index("banana") → 1           |
		| Change Item          | Modify item by index                              |  fruits[1] = "grape"                  |
		|  insert()            | Insert item at a specific index                   |  fruits.insert(2, "melon")            |
		|  append()            | Add item to the end of the list                   |  fruits.append("kiwi")                |
		|  extend()            | Add multiple items from another list              |  fruits.extend(["peach", "plum"])     |
		|  remove()            | Remove first occurrence of an item                |  fruits.remove("apple")               |
		|  pop()               | Remove item at index or last if no index provided |  fruits.pop(1) ,  fruits.pop()        |
		|  del                 | Delete item by index or entire list               |  del fruits[1] ,  del fruits          |
		|  clear()             | Remove all items from the list                    |  fruits.clear()                       |
		|  sort()              | Sort list in ascending order                      |  fruits.sort()                        |
		|  sort(reverse=True)  | Sort list in descending order                     |  fruits.sort(reverse=True)            |
		|  reverse()           | Reverse the list order                            |  fruits.reverse()                     |
		|  copy()              | Create a shallow copy of the list                 |  new_list = fruits.copy()             |
		| List Comprehension   | Create list using loop and condition              |  [x for x in range(5) if x % 2 == 0]  |

	3. Set Operations

		|   Operation              |   Description                                  |   Example                     |
		| ------------------------ | ---------------------------------------------- | ----------------------------- |
		|  add()                   | Adds an element to the set                     |  s.add(5)                     |
		|  update()                | Adds multiple elements                         |  s.update([1, 2, 3])          |
		|  remove()                | Removes element; error if not found            |  s.remove(2)                  |
		|  discard()               | Removes element if present; no error if absent |  s.discard(10)                |
		|  pop()                   | Removes a random element                       |  s.pop()                      |
		|  clear()                 | Removes all elements                           |  s.clear()                    |
		|  union()                 | Returns union of two sets                      |  s1.union(s2)                 |
		|  intersection()          | Returns common elements                        |  s1.intersection(s2)          |
		|  difference()            | Returns items only in first set                |  s1.difference(s2)            |
		|  symmetric_difference()  | Items in either, but not both sets             |  s1.symmetric_difference(s2)  |
		|  issubset()              | Checks if set is subset                        |  s1.issubset(s2)              |
		|  issuperset()            | Checks if set is superset                      |  s1.issuperset(s2)            |
		|  isdisjoint()            | Checks if sets have no items in common         |  s1.isdisjoint(s2)            |

	4. Tuple Operations 

		|   Operation   |   Description                          |   Example                 |
		| ------------- | -------------------------------------- | ------------------------- |
		| Indexing      | Access item by index                   |  t[1] → 'banana'          |
		| Slicing       | Access a range of items                |  t[1:3]                   |
		|  count()      | Count occurrences of a value           |  t.count("apple") → 2     |
		|  index()      | Find index of a value                  |  t.index("banana") → 1    |
		|  in           | Check if value exists                  |  "apple" in t → True      |
		|  len()        | Length of tuple                        |  len(t) → 3               |
		| Immutability  | Cannot be modified after creation      |  t[0] = "new"  ❌ Error   |
		| Nesting       | Tuples can contain lists, other tuples |  t = (1, [2, 3], (4, 5))  |

	5. Dictionary Operations
		|   Operation   |   Description                                     |   Example                |
		| ------------- | ------------------------------------------------- | ------------------------ |
		|  get()        | Gets value by key (returns None if not found)     |  d.get("name")           |
		|  keys()       | Returns list-like view of all keys                |  d.keys()                |
		|  values()     | Returns list-like view of all values              |  d.values()              |
		|  items()      | Returns view of key-value pairs                   |  d.items()               |
		|  update()     | Updates dictionary with another dict or key-value |  d.update({"age": 30})   |
		|  pop()        | Removes key and returns its value                 |  d.pop("name")           |
		|  popitem()    | Removes and returns last key-value pair           |  d.popitem()             |
		|  del          | Deletes key or entire dict                        |  del d["name"] ,  del d  |
		|  clear()      | Empties the dictionary                            |  d.clear()               |
		|  in           | Check if key exists                               |  "name" in d → True      |
		| Indexing      | Access or assign value with key                   |  d["name"] = "Ali"       |

	6. File Operations

	|   Operation    |   Description                                            |   Example                      |
	| -------------- | -------------------------------------------------------- | ------------------------------ |
	|  open()        | Opens a file ( 'r' ,  'w' ,  'a' ,  'rb' ,  'wb' , etc.) |  f = open("file.txt", "r")     |
	|  read()        | Reads entire file content                                |  f.read()                      |
	|  readline()    | Reads one line                                           |  f.readline()                  |
	|  readlines()   | Reads all lines into a list                              |  f.readlines()                 |
	|  write()       | Writes content (overwrites in  'w'  mode)                |  f.write("Hello")              |
	|  writelines()  | Writes a list of strings to a file                       |  f.writelines(["a\n", "b\n"])  |
	|  close()       | Closes the file                                          |  f.close()                     |
	|  with open()   | Context manager to open file (auto-close)                |  with open("file.txt") as f:   |
	|  seek()        | Move the file cursor to given position                   |  f.seek(0)                     |
	|  tell()        | Returns current file position                            |  f.tell()                      |
	|  flush()       | Force write buffer to disk                               |  f.flush()                     |

5. Operators: 
`````````````
	Operator is the tool, operation is the action.
	- A symbol used to perform a specific action.
			Example: +, -, *, ==, in
	- used to perform operations on variables and values

	1. Arithmetic Operator	
			- Numeric values to perform common Mathematical Operations
				
				+ , - , * , / , % , ** , // 

		| Operator | Name           | Description                               | Example        |
		| -------- | -------------- | ----------------------------------------- | -------------- |
		|  +       | Addition       | Adds two values                           | 3 + 2 = 5     |
		|  -       | Subtraction    | Subtracts right operand from left         |  5 - 2 = 3     |
		|  *       | Multiplication | Multiplies both values                    |  4 * 3 = 12    |
		|  /       | Division       | Divides left by right (float result)      |  10 / 4 = 2.5  |
		|  //      | Floor Division | Divides and removes decimal (rounds down) |  10 // 4 = 2   |
		|  %       | Modulo         | Returns remainder                         |  10 % 3 = 1    |
		|  **      | Exponentiation | Power of (left raised to right)           |  2 ** 3 = 8    |
				
	2. Assignment Operator	
			- Assign values to Variables 
				
				= , += , -=, *= , /=, %=, **=, //= , &= , |= , ^= , >>= , <<= 

		| Operator | Name                | Description       | Example   |   
		| -------- | ------------------- | ----------------- | --------- | 
		|  =       | Assignment          | Assigns value     |  x = 5    |     
		|  +=      | Add AND assign      |  x = x + 3        |  x += 3   |    
		|  -=      | Subtract AND assign |  x = x - 2        |  x -= 2   |     
		|  *=      | Multiply AND assign |  x = x * 4        |  x *= 4   |   
		|  /=      | Divide AND assign   |  x = x / 2        |  x /= 2   |  
		|  //=     | Floor divide assign |  x = x // 2       |  x //= 2  |  
		|  %=      | Modulo AND assign   |  x = x % 2        |  x %= 2   |   
		|  **=     | Power AND assign    |  x = x ** 2       |  x **= 2  |    
		|  &=      | Bitwise AND assign  |  x = x & 1        |  x &= 1   |   
		|  |=      | Bitwise OR assign   |  x = x | 2        |  x |= 2   | 
		|  ^=      | Bitwise XOR assign  |  x = x ^ 3        |  x ^= 3   |     
		|  >>=     | Right shift assign  |  x = x >> 1       |  x >>= 1  |    
		|  <<=     | Left shift assign   |  x = x << 1       |  x <<= 1  |    
	
	3. Comparison Operator	
			- Compare two values
				
				== , != , > , < , >= , <=

		| Operator | Description              | Example  |
		| -------- | ------------------------ | -------- |
		|  ==      | Equal to                 |  x == y  |
		|  !=      | Not equal to             |  x != y  |
		|  >       | Greater than             |  x > y   |
		|  <       | Less than                |  x < y   |
		|  >=      | Greater than or equal to |  x >= y  |
		|  <=      | Less than or equal to    |  x <= y  |
				
	4. Logical Operator	
			- Combine Conditional Statements
				
				and , or , not 

		| Operator | Description                      | Example            |
		| -------- | -------------------------------- | ------------------ |
		|  and     | True if both conditions are True |  x > 2 and x < 10  |
		|  or      | True if one condition is True    |  x < 5 or x > 20   |
		|  not     | Reverses the condition           |  not(x == 5)       |
				
	5. Identity Operator	
			- Compare the objects
				
				is , is not

		| Operator | Description                                 | Example      |
		| -------- | ------------------------------------------- | ------------ |
		|  is      | True if both variables point to same object |  x is y      |
		|  is not  | True if they don't point to same object     |  x is not y  |
				
	6. Membership Operator	
			- Test is a sequence is present
				
				in , not in

		| Operator | Description                   | Example            |
		| -------- | ----------------------------- | ------------------ |
		|  in      | True if value is in sequence  |  "a" in "apple"    |
		|  not in  | True if value not in sequence |  "z" not in "dog"  |

	7. Bitwise Operator	
 		- Compare Binary Numbers
 			
			 & , | , ^ , ~ , << , >>
			
		| Operator | Description        | Example (in binary)       |     
		| -------- | ------------------ | ------------------------- |
		|  &       | AND                |  5 & 3 → 101 & 011 = 001  |    
		|  |       | OR                 |  5 | 3 → 101 | 011 = 111  |                    
		|  ^       | XOR (exclusive OR) |  5 ^ 3 → 101 ^ 011 = 110  |   
		|  ~       | NOT (inverts bits) |  ~5 → -(5+1) = -6         |  
		|  <<      | Left shift         |  2 << 1 → 4  (10 → 100)   |    
		|  >>      | Right shift        |  4 >> 1 → 2  (100 → 10)   |    

6. Flow Control:
`````````````````
	1. Conditional Statement
			- It lets the program decide which block of code to execute based on the condition. Decision making.

		|  Name      |  Definition                                          |  Syntax                 |  Example                            |
		| ---------- | ---------------------------------------------------- | ----------------------- | ----------------------------------- |
		|  if        | Runs a block of code if the condition is True        |  if condition:          |  if x > 10:\n    print("Big")       |
		|  elif      | Runs if the  if  is False and this condition is True |  elif condition:        |  elif x == 10:\n    print("Equal")  |
		|  else      | Runs if all above conditions are False               |  else:                  |  else:\n    print("Small")          |
		| Ternary if | One-line conditional expression                      |  x if condition else y  |  result = "Yes" if x > 0 else "No"  |

	2. Looping Statement
			- Used to repeate a block of code multiple times.

		|  Name    |  Definition                              |  Syntax                |  Example                           |
		| -------- | ---------------------------------------- | ---------------------- | ---------------------------------- |
		|  for     | Iterates over items in a sequence        |  for var in sequence:  |  for i in range(3):\n    print(i)  |
		|  while   | Repeats code while the condition is True |  while condition:      |  while x < 5:\n    x += 1          |

	3. Loop Control Statement
			- Used to alter the flow of loops: exit early, skip iterations or do nothing.

		|  Name          |  Definition                                       |  Syntax               |  Example                                     |
		| -------------- | ------------------------------------------------- | --------------------- | -------------------------------------------- |
		|  break         | Exits the loop immediately                        |  break                |  if x == 3:\n    break                       |
		|  continue      | Skips the rest of the loop iteration              |  continue             |  if x % 2 == 0:\n    continue                |
		|  pass          | Does nothing (placeholder)                        |  pass                 |  if True:\n    pass                          |
		|  else  on loop | Executes if the loop was not exited using  break  |  for/while ... else:  |  for i in range(3): ... else: print("Done")  |

	4. Exception Handling Statement
			- Used to handle errors or unexpected conditions gracefully without crashing the program

		|  Name     |  Definition                              |  Syntax             |  Example                                        |
		| --------- | ---------------------------------------- | ------------------- | ----------------------------------------------- |
		|  try      | Block where an error might occur         |  try:               |  try:\n    x = 1 / 0                            |
		|  except   | Block to handle the error                |  except ErrorType:  |  except ZeroDivisionError:\n    print("Error")  |
		|  else     | Runs if  try  succeeds without exception |  else:              |  else:\n    print("No errors")                  |
		|  finally  | Runs no matter what, error or no error   |  finally:           |  finally:\n    print("Cleanup")                 |

	5. Match Statement
			- Pattern matching allows matching values and executing corresponding code blocks, similar to switch in other languages.

		|  Name    |  Definition                               |  Syntax           |  Example                        |
		| -------- | ----------------------------------------- | ----------------- | ------------------------------- |
		|  match   | Start of the pattern matching structure   |  match variable:  |  match status:                  |
		|  case    | Handles each pattern                      |  case value:      |  case 200:\n    print("OK")     |
		|  case _  | Catch-all case (like  default  in switch) |  case _:          |  case _:\n    print("Unknown")  |

	6. Assert Statement
		- Used to debugging. It tests if a condition is True; if not, it raises an AssertionError.

	|  Name    |  Definition                  |  Syntax            |  Example                             |
	| -------- | ---------------------------- | ------------------ | ------------------------------------ |
	|  assert  | Tests if a condition is True |  assert condition  |  assert x > 0, "x must be positive"  |


		
Collection Data Types
`````````````````````
| Type        | Symbol      | Ordered | Changeable | Duplicates | Key Feature                       | Example                           |
| ----------- | ----------- | ------- | ---------- | ---------- | --------------------------------- | --------------------------------- |
|  List       |  []         |   Yes   |   Yes      |   Yes      | Stores items in order, modifiable |  ['apple', 'banana', 'apple']     |
|  Tuple      |  ()         |   Yes   |   No       |   Yes      | Fixed after creation              |  ('a', 'b', 'a')                  |
|  Set        |  {}         |   No    |   Yes      |   No       | Unordered, no duplicates          |  {1, 2, 3}                        |
|  FrozenSet  | frozenset() |   No    |   No       |   No       | Like set but immutable            |  frozenset([1, 2, 3])             |
|  Dict       |  {}         |   No    |   Yes      |   No       | Key-value pairs                   |  {'name': 'Shiffana', 'age': 25}  |


Object Oriented Programming:
```````````````````````````
  -  OOP (Object-Oriented Programming) is a programming paradigm that emphasizes the use of objects and 
		classes to represent and manipulate data. 
  -  In Python, you can use OOP concepts to design and create classes, objects, and methods that encapsulate 
		data and behavior into a single unit. 
		
Here are some of the key OOP concepts in Python:

Class:
`````` 
  -  A class is a blueprint or a template for creating objects. It defines the attributes (data) and 
  		methods (functions) that the objects of that class will have.

Object:
```````` 
  -  An object is an instance of a class. It is created from a class and has its own unique data and behavior. 
	 	Objects can be created, modified, and deleted dynamically during program execution.

Encapsulation: 
``````````````
  -	Encapsulation is the process of hiding the implementation details of a class from the outside world and 
		exposing only the necessary interface for interacting with the class. This helps to improve code
		modularity and reduce code complexity.

Inheritance: 
````````````
  -  Inheritance is the ability of a class to inherit the attributes and methods of another class. 
  -  It allows you to reuse existing code and create new classes that extend the functionality of existing classes.

Polymorphism: 
`````````````
  -  Polymorphism is the ability of different objects to respond to the same message (method call) in different ways. 
  -  It allows you to write code that can work with different types of objects without knowing their specific types at compile-time.

In Python, you can use these OOP concepts to create reusable, modular, and maintainable code that is easier to understand and debug. 
OOP can be a powerful tool for solving complex programming problems and building robust software systems.
    