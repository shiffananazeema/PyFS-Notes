
# Python Code Snippets for Common Mathematical Operations

find missing number      - use sum formula  n * (n + 1) // 2
sum of digits            - n * (n + 1) // 2
sum of squares           - n * (n + 1) * (2 * n + 1) // 6
sum of cubes             - (n * (n + 1) // 2) ** 2
sum of arithmetic series - (n * (2 * a + (n - 1) * d)) // 2
sum of geometric series  - a * (1 - r**n) // (1 - r) if r != 1 else a * n
gcd                      - import math  math.gcd(a, b)
lcm                      - import math  (a * b) // math.gcd(a, b)
factorial                - import math  math.factorial(n) / f=1 for i in range(2, n+1): f *= i
                         - fact = 1; for i in range(1, n+1): fact = (fact * i) % (10**9 + 7)
fibonacci                - def fib(n): a, b = 0, 1; for _ in range(n): a, b = b, a + b; return a
                         - f = [0,1]; for _ in range(n-1): n = (f[-1]+f[-2])%(10**9 +7); f.append(n); return f
is_palindrome            - str(n) == str(n)[::-1]
is_anagram               - sorted(str(a)) == sorted(str(b))
is_armstrong             - sum(int(d)**3 for d in str(n)) == n # for 3-digit numbers
is_adam_number          - n == sum(int(d)**len(str(n)) for d in str(n))  # for n-digit numbers
is_perfect_square        - int(n**0.5) ** 2 == n
is_prime                 - print("True" if n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1)) else "False")
is_fibonacci             - def is_fib(n): a, b = 0, 1; while a < n: a, b = b, a + b; return a == n
is_factorial             - fact = 1; i = 1; while fact < N: i += 1; fact *= i; return int(fact == N)
is_perfect_number        - n == sum(i for i in range(1, n) if n % i == 0)
count_set_bits           - bin(n).count('1')
count_trailing_zeros     - len(bin(n)) - len(bin(n).rstrip('0'))

celsius to fahrenheit    - (c * 9/5) + 32
fahrenheit to celsius    - (f - 32) * 5/9
celsius to kelvin        - c + 273.15
fahrenheit to kelvin     - (f - 32) * 5/9 + 273.15


Time Complexity Cheat Sheet:

    | Time Complexity | Name              | What It Means                           | Example Code                            |
    | --------------- | ----------------- | --------------------------------------- | --------------------------------------- |
    |   O(1)          | Constant Time     | Takes same time no matter the input     | print("Hello")                         |
    |   O(log n)      | Logarithmic Time  | Cuts work in half each step             | Binary Search                           |
    |   O(n)          | Linear Time       | Grows linearly with input               | for i in range(n):                     |
    |   O(n log n)    | Linearithmic Time | Sorting algorithms like Merge Sort      | Merge Sort, Heap Sort                   |
    |   O(n²)         | Quadratic Time    | Nested loops over the same input        | for i in range(n): for j in range(n):  |
    |   O(√n)         | Square Root Time  | Useful in divisor, prime-check problems | for i in range(1, int(n**0.5) + 1):   |
    |   O(2ⁿ)         | Exponential Time  | Doubles every time — grows very fast    | Recursive Fibonacci                     |
    |   O(n!)         | Factorial Time    | All permutations — super slow           | Brute-force traveling salesman          |

    Common Examples in Real Code  

     🔹   Print numbers from 1 to n  

    for i in range(n):       # O(n)
        print(i)
       

     🔹   Check if a number is prime  

    for i in range(2, int(n**0.5) + 1):  # O(√n)
        if n % i == 0:
            print("Not Prime")


     🔹   Binary Search in a sorted array  

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            break
       
    ⏱ Time Complexity:   O(log n)  


     🔹   Two nested loops  

    for i in range(n):         # Outer loop: n
        for j in range(n):     # Inner loop: n
            print(i, j)
       
    ⏱ Time Complexity:   O(n²)  


    | Goal                        | Try this instead of…                   |
    | --------------------------- | -------------------------------------- |
    | Find prime                  | Use  sqrt(n)  instead of  range(1, n)  |
    | Searching sorted list       | Use binary search →  O(log n)          |
    | Sorting before searching    | Sort once, then use fast search        |
    | Avoid unnecessary recursion | Use loops or memoization               |